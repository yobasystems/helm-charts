# Default values for postgresql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/yobasystems/alpine-postgres
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "16.6.0"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# PostgreSQL specific configuration
postgresqlConfiguration:
  # It is strongly recommended to use Kubernetes secrets for passwords.
  # Create secrets and reference them here or directly in the deployment.yaml.
  # Example for deployment.yaml:
  # env:
  #   - name: POSTGRES_PASSWORD
  #     valueFrom:
  #       secretKeyRef:
  #         name: postgresql-secret
  #         key: postgres-password
  postgresPassword: "changeme-root" # Corresponds to POSTGRES_PASSWORD for the 'postgres' superuser
  database: "mydatabase"          # Corresponds to POSTGRES_DB
  user: "myuser"                # Corresponds to POSTGRES_USER (will be created if not 'postgres')
  password: "changeme-user"       # Corresponds to POSTGRES_PASSWORD (for the POSTGRES_USER)
  initdbArgs: ""

# This allows for custom environment variables to be passed to the container.
# For example, to set the PostgreSQL timezone or initdb arguments:
# extraEnvVars:
#   - name: PGTZ
#     value: "Europe/London"
#   - name: POSTGRES_INITDB_ARGS
#     value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
extraEnvVars: []

podSecurityContext: {}
  # fsGroup: 2000 # For PostgreSQL, data directory permissions are managed by the entrypoint script.
                 # The official image runs as 'postgres' user (often 70 or 999).
                 # If fsGroup is set, it might conflict unless it matches the postgres user's GID.

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true # PostgreSQL needs to write to its data directory
  # runAsNonRoot: true
  # runAsUser: 70 # Or 999, depending on the alpine-postgresql base image. Check image details if specific UID/GID is needed.

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  port: 5432
  # nodePort: 30000 # Example if type is NodePort. Only used if service.type is NodePort.
  # loadBalancerIP: # Example if type is LoadBalancer. Provide an IP if you want a specific one.
  # annotations: {} # Example: service.beta.kubernetes.io/aws-load-balancer-type: nlb

# Ingress configuration
# Enable ingress controller resource
ingress:
  enabled: false
  # className: "nginx"
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Liveness and Readiness probes
# For more information: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
  tcpSocket:
    port: 5432

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
  tcpSocket:
    port: 5432

# This is for setting up resources for the pod more information can be found here: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is for setting up Horizontal Pod Autoscaler more information can be found here: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# This is for setting up persistence more information can be found here: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistence:
  data:
    enabled: true
    annotations: {}
    # If you want to use an existing claim, you can specify its name here
    # existingClaim: your-existing-pvc-name
    storageClass: "" #  If you want to use a specific storage class, specify its name here, otherwise default will be used
    accessMode: ReadWriteOnce
    size: 8Gi
    mountPath: /var/lib/postgresql/data
  # Logs persistence removed as PostgreSQL in containers typically logs to stdout/stderr.
  # If specific log file persistence is needed, it can be re-added, but it's not standard for this setup.

# This is for setting up node selectors more information can be found here: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}

# This is for setting up tolerations more information can be found here: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# This is for setting up affinity more information can be found here: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
